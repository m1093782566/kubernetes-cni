// Code generated by protoc-gen-gogo.
// source: api.proto
// DO NOT EDIT!

/*
Package runtime_v1alpha1 is a generated protocol buffer package.

use other package for generate

It is generated from these files:
	api.proto

It has these top-level messages:
	SupportVersionRequest
	SupportVersionResponse
	StatusRequest
	StatusResponse
	SetUpPodRequest
	SetUpPodResponse
	TearDownPodRequest
	TearDownPodResponse
	PodRuntimeInfo
	PortMapping
	Empty
*/
package runtime_v1alpha1

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SupportVersionRequest struct {
	Version string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (m *SupportVersionRequest) Reset()                    { *m = SupportVersionRequest{} }
func (m *SupportVersionRequest) String() string            { return proto.CompactTextString(m) }
func (*SupportVersionRequest) ProtoMessage()               {}
func (*SupportVersionRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

func (m *SupportVersionRequest) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type SupportVersionResponse struct {
	Support bool `protobuf:"varint,1,opt,name=Support,proto3" json:"Support,omitempty"`
}

func (m *SupportVersionResponse) Reset()                    { *m = SupportVersionResponse{} }
func (m *SupportVersionResponse) String() string            { return proto.CompactTextString(m) }
func (*SupportVersionResponse) ProtoMessage()               {}
func (*SupportVersionResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

func (m *SupportVersionResponse) GetSupport() bool {
	if m != nil {
		return m.Support
	}
	return false
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type StatusResponse struct {
	Syncde        bool              `protobuf:"varint,1,opt,name=Syncde,proto3" json:"Syncde,omitempty"`
	Capabilitiies map[string]*Empty `protobuf:"bytes,2,rep,name=Capabilitiies" json:"Capabilitiies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

func (m *StatusResponse) GetSyncde() bool {
	if m != nil {
		return m.Syncde
	}
	return false
}

func (m *StatusResponse) GetCapabilitiies() map[string]*Empty {
	if m != nil {
		return m.Capabilitiies
	}
	return nil
}

type SetUpPodRequest struct {
	RuntimeInfo *PodRuntimeInfo `protobuf:"bytes,1,opt,name=RuntimeInfo" json:"RuntimeInfo,omitempty"`
}

func (m *SetUpPodRequest) Reset()                    { *m = SetUpPodRequest{} }
func (m *SetUpPodRequest) String() string            { return proto.CompactTextString(m) }
func (*SetUpPodRequest) ProtoMessage()               {}
func (*SetUpPodRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

func (m *SetUpPodRequest) GetRuntimeInfo() *PodRuntimeInfo {
	if m != nil {
		return m.RuntimeInfo
	}
	return nil
}

type SetUpPodResponse struct {
}

func (m *SetUpPodResponse) Reset()                    { *m = SetUpPodResponse{} }
func (m *SetUpPodResponse) String() string            { return proto.CompactTextString(m) }
func (*SetUpPodResponse) ProtoMessage()               {}
func (*SetUpPodResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type TearDownPodRequest struct {
	RuntimeInfo *PodRuntimeInfo `protobuf:"bytes,1,opt,name=RuntimeInfo" json:"RuntimeInfo,omitempty"`
}

func (m *TearDownPodRequest) Reset()                    { *m = TearDownPodRequest{} }
func (m *TearDownPodRequest) String() string            { return proto.CompactTextString(m) }
func (*TearDownPodRequest) ProtoMessage()               {}
func (*TearDownPodRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func (m *TearDownPodRequest) GetRuntimeInfo() *PodRuntimeInfo {
	if m != nil {
		return m.RuntimeInfo
	}
	return nil
}

type TearDownPodResponse struct {
}

func (m *TearDownPodResponse) Reset()                    { *m = TearDownPodResponse{} }
func (m *TearDownPodResponse) String() string            { return proto.CompactTextString(m) }
func (*TearDownPodResponse) ProtoMessage()               {}
func (*TearDownPodResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

type PodRuntimeInfo struct {
	Name        string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Namespace   string         `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	NetnsPath   string         `protobuf:"bytes,3,opt,name=NetnsPath,proto3" json:"NetnsPath,omitempty"`
	RuntimeType string         `protobuf:"bytes,4,opt,name=RuntimeType,proto3" json:"RuntimeType,omitempty"`
	PortMap     []*PortMapping `protobuf:"bytes,6,rep,name=PortMap" json:"PortMap,omitempty"`
	ContainerID string         `protobuf:"bytes,5,opt,name=ContainerID,proto3" json:"ContainerID,omitempty"`
}

func (m *PodRuntimeInfo) Reset()                    { *m = PodRuntimeInfo{} }
func (m *PodRuntimeInfo) String() string            { return proto.CompactTextString(m) }
func (*PodRuntimeInfo) ProtoMessage()               {}
func (*PodRuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

func (m *PodRuntimeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodRuntimeInfo) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodRuntimeInfo) GetNetnsPath() string {
	if m != nil {
		return m.NetnsPath
	}
	return ""
}

func (m *PodRuntimeInfo) GetRuntimeType() string {
	if m != nil {
		return m.RuntimeType
	}
	return ""
}

func (m *PodRuntimeInfo) GetPortMap() []*PortMapping {
	if m != nil {
		return m.PortMap
	}
	return nil
}

func (m *PodRuntimeInfo) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

type PortMapping struct {
	// Protocol of the port mapping.
	Protocol string `protobuf:"bytes,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Port number within the container. Default: 0 (not specified).
	ContainerPort int32 `protobuf:"varint,2,opt,name=container_port,json=containerPort,proto3" json:"container_port,omitempty"`
	// Port number on the host. Default: 0 (not specified).
	HostPort int32 `protobuf:"varint,3,opt,name=host_port,json=hostPort,proto3" json:"host_port,omitempty"`
	// Host IP.
	HostIp string `protobuf:"bytes,4,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
}

func (m *PortMapping) Reset()                    { *m = PortMapping{} }
func (m *PortMapping) String() string            { return proto.CompactTextString(m) }
func (*PortMapping) ProtoMessage()               {}
func (*PortMapping) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

func (m *PortMapping) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *PortMapping) GetContainerPort() int32 {
	if m != nil {
		return m.ContainerPort
	}
	return 0
}

func (m *PortMapping) GetHostPort() int32 {
	if m != nil {
		return m.HostPort
	}
	return 0
}

func (m *PortMapping) GetHostIp() string {
	if m != nil {
		return m.HostIp
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

func init() {
	proto.RegisterType((*SupportVersionRequest)(nil), "runtime.v1alpha1.SupportVersionRequest")
	proto.RegisterType((*SupportVersionResponse)(nil), "runtime.v1alpha1.SupportVersionResponse")
	proto.RegisterType((*StatusRequest)(nil), "runtime.v1alpha1.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "runtime.v1alpha1.StatusResponse")
	proto.RegisterType((*SetUpPodRequest)(nil), "runtime.v1alpha1.SetUpPodRequest")
	proto.RegisterType((*SetUpPodResponse)(nil), "runtime.v1alpha1.SetUpPodResponse")
	proto.RegisterType((*TearDownPodRequest)(nil), "runtime.v1alpha1.TearDownPodRequest")
	proto.RegisterType((*TearDownPodResponse)(nil), "runtime.v1alpha1.TearDownPodResponse")
	proto.RegisterType((*PodRuntimeInfo)(nil), "runtime.v1alpha1.PodRuntimeInfo")
	proto.RegisterType((*PortMapping)(nil), "runtime.v1alpha1.PortMapping")
	proto.RegisterType((*Empty)(nil), "runtime.v1alpha1.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CNIService service

type CNIServiceClient interface {
	// SupportVersion to check version support or not
	// return true or false
	SupportVersion(ctx context.Context, in *SupportVersionRequest, opts ...grpc.CallOption) (*SupportVersionResponse, error)
	// Status to check cniDriver status, config synced/plugin capabilities
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	SetUpPod(ctx context.Context, in *SetUpPodRequest, opts ...grpc.CallOption) (*SetUpPodResponse, error)
	TearDownPod(ctx context.Context, in *TearDownPodRequest, opts ...grpc.CallOption) (*TearDownPodResponse, error)
}

type cNIServiceClient struct {
	cc *grpc.ClientConn
}

func NewCNIServiceClient(cc *grpc.ClientConn) CNIServiceClient {
	return &cNIServiceClient{cc}
}

func (c *cNIServiceClient) SupportVersion(ctx context.Context, in *SupportVersionRequest, opts ...grpc.CallOption) (*SupportVersionResponse, error) {
	out := new(SupportVersionResponse)
	err := grpc.Invoke(ctx, "/runtime.v1alpha1.CNIService/SupportVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/runtime.v1alpha1.CNIService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIServiceClient) SetUpPod(ctx context.Context, in *SetUpPodRequest, opts ...grpc.CallOption) (*SetUpPodResponse, error) {
	out := new(SetUpPodResponse)
	err := grpc.Invoke(ctx, "/runtime.v1alpha1.CNIService/SetUpPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cNIServiceClient) TearDownPod(ctx context.Context, in *TearDownPodRequest, opts ...grpc.CallOption) (*TearDownPodResponse, error) {
	out := new(TearDownPodResponse)
	err := grpc.Invoke(ctx, "/runtime.v1alpha1.CNIService/TearDownPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CNIService service

type CNIServiceServer interface {
	// SupportVersion to check version support or not
	// return true or false
	SupportVersion(context.Context, *SupportVersionRequest) (*SupportVersionResponse, error)
	// Status to check cniDriver status, config synced/plugin capabilities
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	SetUpPod(context.Context, *SetUpPodRequest) (*SetUpPodResponse, error)
	TearDownPod(context.Context, *TearDownPodRequest) (*TearDownPodResponse, error)
}

func RegisterCNIServiceServer(s *grpc.Server, srv CNIServiceServer) {
	s.RegisterService(&_CNIService_serviceDesc, srv)
}

func _CNIService_SupportVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServiceServer).SupportVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.CNIService/SupportVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServiceServer).SupportVersion(ctx, req.(*SupportVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.CNIService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIService_SetUpPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUpPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServiceServer).SetUpPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.CNIService/SetUpPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServiceServer).SetUpPod(ctx, req.(*SetUpPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CNIService_TearDownPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TearDownPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CNIServiceServer).TearDownPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/runtime.v1alpha1.CNIService/TearDownPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CNIServiceServer).TearDownPod(ctx, req.(*TearDownPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CNIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "runtime.v1alpha1.CNIService",
	HandlerType: (*CNIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupportVersion",
			Handler:    _CNIService_SupportVersion_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CNIService_Status_Handler,
		},
		{
			MethodName: "SetUpPod",
			Handler:    _CNIService_SetUpPod_Handler,
		},
		{
			MethodName: "TearDownPod",
			Handler:    _CNIService_TearDownPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0x93, 0xe6, 0x6b, 0xac, 0xa6, 0xd1, 0xa0, 0xb6, 0x56, 0x00, 0x61, 0x56, 0x54, 0xe4,
	0x42, 0xa4, 0xa4, 0x07, 0x10, 0x47, 0xd2, 0x1e, 0x72, 0x68, 0x15, 0xd9, 0x2d, 0xa2, 0x12, 0x12,
	0xda, 0xa6, 0x0b, 0x59, 0x91, 0xec, 0x2e, 0xf6, 0x26, 0x28, 0x7f, 0x80, 0x7f, 0x09, 0xff, 0x82,
	0x3b, 0xf2, 0x7a, 0x9d, 0xc4, 0x75, 0x20, 0x17, 0x4e, 0xf1, 0xbc, 0x79, 0xef, 0x6d, 0x66, 0x77,
	0x1e, 0x34, 0xa8, 0xe2, 0x5d, 0x15, 0x49, 0x2d, 0xb1, 0x15, 0xcd, 0x85, 0xe6, 0x33, 0xd6, 0x5d,
	0xf4, 0xe8, 0x54, 0x4d, 0x68, 0x8f, 0xf4, 0xe0, 0x28, 0x9c, 0x2b, 0x25, 0x23, 0xfd, 0x9e, 0x45,
	0x31, 0x97, 0x22, 0x60, 0xdf, 0xe6, 0x2c, 0xd6, 0xe8, 0x41, 0xcd, 0x22, 0x9e, 0xe3, 0x3b, 0x9d,
	0x46, 0x90, 0x95, 0xa4, 0x0f, 0xc7, 0x0f, 0x25, 0xb1, 0x92, 0x22, 0x66, 0x89, 0xc6, 0x76, 0x8c,
	0xa6, 0x1e, 0x64, 0x25, 0x39, 0x84, 0x83, 0x50, 0x53, 0x3d, 0x8f, 0xad, 0x3d, 0xf9, 0xe5, 0x40,
	0x33, 0x43, 0xac, 0xfa, 0x18, 0xaa, 0xe1, 0x52, 0x8c, 0xef, 0x99, 0x15, 0xdb, 0x0a, 0x6f, 0xe1,
	0x60, 0x40, 0x15, 0xbd, 0xe3, 0x53, 0xae, 0x39, 0x67, 0xb1, 0x57, 0xf2, 0xcb, 0x1d, 0xb7, 0x7f,
	0xd6, 0x7d, 0x38, 0x4c, 0x37, 0x6f, 0xd8, 0xcd, 0xa9, 0x2e, 0x84, 0x8e, 0x96, 0x41, 0xde, 0xa9,
	0x7d, 0x0b, 0x58, 0x24, 0x61, 0x0b, 0xca, 0x5f, 0xd9, 0xd2, 0x8e, 0x9d, 0x7c, 0xe2, 0x2b, 0xa8,
	0x2c, 0xe8, 0x74, 0xce, 0xbc, 0x92, 0xef, 0x74, 0xdc, 0xfe, 0x49, 0xf1, 0xe8, 0x8b, 0x99, 0xd2,
	0xcb, 0x20, 0x65, 0xbd, 0x2d, 0xbd, 0x71, 0xc8, 0x0d, 0x1c, 0x86, 0x4c, 0xdf, 0xa8, 0x91, 0xbc,
	0xcf, 0xae, 0xf4, 0x1d, 0xb8, 0x41, 0xaa, 0x1b, 0x8a, 0xcf, 0xd2, 0xf8, 0xbb, 0x7d, 0xbf, 0xe8,
	0x95, 0x48, 0xd6, 0xbc, 0x60, 0x53, 0x44, 0x10, 0x5a, 0x6b, 0xdb, 0x74, 0x4e, 0xf2, 0x01, 0xf0,
	0x9a, 0xd1, 0xe8, 0x5c, 0x7e, 0x17, 0xff, 0xf9, 0xb4, 0x23, 0x78, 0x94, 0x73, 0xb6, 0x07, 0xfe,
	0x74, 0xa0, 0x99, 0x97, 0x21, 0xc2, 0xfe, 0x15, 0x9d, 0x31, 0x7b, 0x69, 0xe6, 0x1b, 0x9f, 0x40,
	0x23, 0xf9, 0x8d, 0x15, 0x1d, 0xa7, 0x37, 0xd7, 0x08, 0xd6, 0x80, 0xe9, 0x32, 0x2d, 0xe8, 0x88,
	0xea, 0x89, 0x57, 0xb6, 0xdd, 0x0c, 0x40, 0x7f, 0xf5, 0xef, 0xaf, 0x97, 0x8a, 0x79, 0xfb, 0xa6,
	0xbf, 0x09, 0xe1, 0x6b, 0xa8, 0x8d, 0x64, 0xa4, 0x2f, 0xa9, 0xf2, 0xaa, 0x66, 0x21, 0x9e, 0x6e,
	0x9b, 0xcd, 0x10, 0x14, 0x17, 0x5f, 0x82, 0x8c, 0x9d, 0x58, 0x0f, 0xa4, 0xd0, 0x94, 0x0b, 0x16,
	0x0d, 0xcf, 0xbd, 0x4a, 0x6a, 0xbd, 0x01, 0x91, 0x1f, 0x0e, 0xb8, 0x1b, 0x52, 0x6c, 0x43, 0xdd,
	0xe4, 0x67, 0x2c, 0xa7, 0x76, 0xc0, 0x55, 0x8d, 0xa7, 0xd0, 0x1c, 0x67, 0xd2, 0x4f, 0x66, 0xf5,
	0x93, 0x49, 0x2b, 0xc1, 0xc1, 0x0a, 0x4d, 0x9c, 0xf0, 0x31, 0x34, 0x26, 0x32, 0xd6, 0x29, 0xa3,
	0x6c, 0x18, 0xf5, 0x04, 0x30, 0xcd, 0x13, 0xa8, 0x99, 0x26, 0x57, 0x76, 0xd0, 0x6a, 0x52, 0x0e,
	0x15, 0xa9, 0x41, 0xc5, 0x2c, 0x56, 0xff, 0x77, 0x09, 0x60, 0x70, 0x35, 0x0c, 0x59, 0xb4, 0xe0,
	0x63, 0x86, 0x0c, 0x9a, 0xf9, 0x08, 0xe2, 0xcb, 0x2d, 0x69, 0xd8, 0x96, 0xeb, 0x76, 0x67, 0x37,
	0xd1, 0xbe, 0xf2, 0x1e, 0x5e, 0x42, 0x35, 0x8d, 0x14, 0x3e, 0xfb, 0x7b, 0xd8, 0x52, 0x5b, 0x7f,
	0x57, 0x1a, 0xc9, 0x1e, 0x86, 0x50, 0xcf, 0x76, 0x17, 0x9f, 0x6f, 0xe1, 0xe7, 0xe3, 0xd2, 0x26,
	0xff, 0xa2, 0xac, 0x4c, 0x3f, 0x82, 0xbb, 0xb1, 0xa2, 0xf8, 0xa2, 0x28, 0x2a, 0x66, 0xa3, 0x7d,
	0xba, 0x83, 0x95, 0xb9, 0xdf, 0x55, 0xcd, 0x3b, 0x9f, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xda,
	0x9f, 0x66, 0x17, 0x44, 0x05, 0x00, 0x00,
}
